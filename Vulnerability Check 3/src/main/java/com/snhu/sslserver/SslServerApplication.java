// # ****************************************************************************************
// # Title: SSL Server		           ******************************************************
// # Developed by: Ryan Hatch         *******************************************************
// # Date: Feburary 24 2024           *******************************************************
// # Last Updated: Feburary 27 2024   *******************************************************
// # Version: 1.1                     *******************************************************
// # ****************************************************************************************

package com.snhu.sslserver;

// Original Code to run dependancies seperately

// import org.springframework.boot.SpringApplication;
// import org.springframework.boot.autoconfigure.SpringBootApplication;

// @SpringBootApplication
// public class SslServerApplication {

// 	public static void main(String[] args) {
// 		SpringApplication.run(SslServerApplication.class, args);
// 	}

// }

// Refactored Code to run dependancies seperately after corrected errors.

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import java.math.BigInteger;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

@SpringBootApplication
public class SslServerApplication {

    public static void main(String[] args) {
        SpringApplication.run(SslServerApplication.class, args);
    }
}

@RestController
class ServerController {

    // Utility method to compute SHA-256 checksum
    public static String computeSHA256(String input) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance("SHA-256");
        byte[] digest = md.digest(input.getBytes(StandardCharsets.UTF_8));
        BigInteger number = new BigInteger(1, digest);
        StringBuilder hexString = new StringBuilder(number.toString(16));
        while (hexString.length() < 32) {
            hexString.insert(0, '0');
        }
        return hexString.toString();
    }

    // Endpoint to get SHA-256 checksum of a string
    @GetMapping("/hash")
    public String generateHash(@RequestParam(value = "input", defaultValue = "Banana404-FOUND!") String input) throws NoSuchAlgorithmException {
        String sha256hex = computeSHA256(input);
        return String.format("Original Data: '%s'%nCipher: SHA-256%nChecksum: %s", input, sha256hex);
    }
}